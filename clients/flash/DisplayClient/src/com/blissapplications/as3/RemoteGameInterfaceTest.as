package com.blissapplications.as3 {		import com.junkbyte.console.Cc;	import flash.utils.setTimeout;	import flash.events.Event;	import flash.display.*;	import flash.text.TextField;	public class RemoteGameInterfaceTest extends MovieClip {				//public static var HOST:String = "127.0.0.1";		public static var HOST:String = "rgi.popofun.blissapplications.com";		public static var PORT:int = 1935;			private var _remoteGameInterface:RemoteGameInterface;				private var _paintMarker:Shape;		private var _label:TextField;						public function RemoteGameInterfaceTest() {				addEventListener(Event.ADDED_TO_STAGE, onAddtoStage);    }    public function onAddtoStage( e:Event ):void    {        Cc.visible = true;			Cc.config.style.big();			Cc.startOnStage(stage,"123");						Cc.width = 750;			Cc.height = 200;			Cc.log("Stage: ("+stage.width+","+stage.height+")");			_remoteGameInterface = new RemoteGameInterface(HOST, PORT);			registerEventListeners();			_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_CONNECT);						_paintMarker = new Shape();			addChild(_paintMarker);						_paintMarker.opaqueBackground = 0xff0000;						_paintMarker.graphics.beginFill(0x00ff00);			      _paintMarker.graphics.drawRect(0, 0, 50, 50);			_paintMarker.graphics.endFill();			_paintMarker.width = 50;			_paintMarker.height = 50;			_paintMarker.x = stage.width / 2 - _paintMarker.width / 2;			_paintMarker.y = stage.height / 2 - _paintMarker.height / 2;    				_label = new TextField();			_label.text = "Obtaining code...";			_label.y = 20;			_label.x = 20;			addChild(_label);		}				private function registerEventListeners():void{			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.CONNECTED, rgiClientConnected);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.REGISTERED, rgiClientRegistered);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.HANDSHAKED, rgiClientHandshaked);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.ACTIVATED, rgiClientActivated);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.PAINT_ACTIVATED, rgiClientPaintActivated);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.PAINT_DEACTIVATED, rgiClientPaintDeactivated);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.DEACTIVATED, rgiClientDeactivated);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.RECEIVED_CONTROL, rgiClientReceivedControl);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.RECEIVED_PAINT_CONTROL, rgiClientReceivedPaintControl);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.RECEIVED_REPLAY, rgiClientReceivedReplay);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.CONTROL_CLIENT_REGISTERED, rgiClientControlClientRegistered);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.CONTROL_CLIENT_UNREGISTERED, rgiClientControlClientUnregistered);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.ERROR, rgiClientError);		}				public function rgiClientConnected(evt:RemoteGameInterfaceEvent):void{			Cc.log("Local client connected!");			_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_REGISTER, null);		}				public function rgiClientRegistered(evt:RemoteGameInterfaceEvent):void{			var hash:Object = evt.data;			Cc.log("Registered with hash: '" + hash + "'!");			_label.text = "Code: " + hash;		}				public function rgiClientHandshaked(evt:RemoteGameInterfaceEvent):void{			Cc.log("Handshaked");		}				public function rgiClientActivated(evt:RemoteGameInterfaceEvent):void{			Cc.log("Activated");			setTimeout(function(){sendScore(5)},1500);		}				public function rgiClientPaintActivated(evt:RemoteGameInterfaceEvent):void{			Cc.log("Paint Activated");		}				public function rgiClientPaintDeactivated(evt:RemoteGameInterfaceEvent):void{			_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_PAINT_FINAL,"http://bit.ly/UBO9Dh");		}				public function sendScore(replay:int):void{			if(replay > 0){				_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_SCORE,5 - replay * 100);				setTimeout(function(){sendScore(replay -1 )},1500);			}else{				_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_DEACTIVATE,5 - replay * 100);			}		}				public function rgiClientDeactivated(evt:RemoteGameInterfaceEvent):void{			Cc.log("Deactivated");		}				public function rgiClientReceivedControl(evt:RemoteGameInterfaceEvent):void{			Cc.inspect(evt.data);		}				public function rgiClientReceivedPaintControl(evt:RemoteGameInterfaceEvent):void{			Cc.inspect(evt.data);			Cc.log(evt.data.X + "," + evt.data.Y + " - " + evt.data.C);			_paintMarker.x = clamp(_paintMarker.x + evt.data.X * 10, 0, 700);			_paintMarker.y = clamp(_paintMarker.y + (-1 * evt.data.Y) * 10, 0, 450);			_paintMarker.graphics.beginFill(hexColorToDecimal(evt.data.C));			      _paintMarker.graphics.drawRect(0, 0, 50, 50);			_paintMarker.graphics.endFill();		}				public function clamp(x:Number, min:Number, max:Number)	{			if(x < min) return min;			if(x > max) return max;			return x;		}				public function rgiClientReceivedReplay(evt:RemoteGameInterfaceEvent):void{			Cc.inspect(evt.data);			//evt.data.PLAYER_NAME			if(evt.data.REPLAY == 1){				//				_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_ACTIVATE);			}			else{							}		}				public function rgiClientControlClientRegistered(evt:RemoteGameInterfaceEvent):void{			var hash:Object = evt.data;			Cc.log("Remote client registered with hash: '" + hash + "'!");		}				public function rgiClientControlClientUnregistered(evt:RemoteGameInterfaceEvent):void{			Cc.log("Remote client unregistered.");		}				public function rgiClientError(evt:RemoteGameInterfaceEvent):void{			Cc.log("Error: " + evt.data);		}				function hexColorToDecimal($hex:String):Number {  	  if ($hex.indexOf("#") != -1) {  	      $hex = "0x"+ $hex.split("#").join("");	    } else { 	       $hex = "0x"+ $hex;		  }  	  return parseInt($hex, 16);		}	}	}