package com.blissapplications.as3 {		import flash.display.MovieClip;	import com.junkbyte.console.Cc;	import flash.utils.setTimeout;	public class RemoteGameInterfaceTest extends MovieClip {				public static var HOST:String = "192.168.1.113";		//public static var HOST:String = "rgi.popofun.blissapplications.com";		public static var PORT:int = 20201;			private var _remoteGameInterface:RemoteGameInterface;				public function RemoteGameInterfaceTest() {			Cc.visible = true;			Cc.config.style.big();			Cc.startOnStage(this);			Cc.height = 500;			Cc.log("YaY");						_remoteGameInterface = new RemoteGameInterface(HOST, PORT);			registerEventListeners();			_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_CONNECT);		}				private function registerEventListeners():void{			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.CONNECTED, rgiClientConnected);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.REGISTERED, rgiClientRegistered);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.HANDSHAKED, rgiClientHandshaked);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.ACTIVATED, rgiClientActivated);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.DEACTIVATED, rgiClientDeactivated);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.RECEIVED_CONTROL, rgiClientReceivedControl);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.RECEIVED_REPLAY, rgiClientReceivedReplay);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.CONTROL_CLIENT_REGISTERED, rgiClientControlClientRegistered);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.CONTROL_CLIENT_UNREGISTERED, rgiClientControlClientUnregistered);			_remoteGameInterface.addEventListener(RemoteGameInterfaceEvent.ERROR, rgiClientError);		}				public function rgiClientConnected(evt:RemoteGameInterfaceEvent):void{			Cc.log("Local client connected!");			_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_REGISTER, null);		}				public function rgiClientRegistered(evt:RemoteGameInterfaceEvent):void{			var hash:Object = evt.data;			Cc.log("Registered with hash: '" + hash + "'!");		}				public function rgiClientHandshaked(evt:RemoteGameInterfaceEvent):void{			Cc.log("Handshaked");		}				public function rgiClientActivated(evt:RemoteGameInterfaceEvent):void{			Cc.log("Activated");			setTimeout(function(){sendScore(5)},1500);		}				public function sendScore(replay:int):void{			if(replay > 0){				_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_SCORE,5 - replay * 100);				setTimeout(function(){sendScore(replay -1 )},1500);			}else{				_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_DEACTIVATE,5 - replay * 100);			}		}				public function rgiClientDeactivated(evt:RemoteGameInterfaceEvent):void{			Cc.log("Deactivated");		}				public function rgiClientReceivedControl(evt:RemoteGameInterfaceEvent):void{			Cc.inspect(evt.data);		}				public function rgiClientReceivedReplay(evt:RemoteGameInterfaceEvent):void{			Cc.inspect(evt.data);			//evt.data.PLAYER_NAME			if(evt.data.REPLAY == 1){				//				_remoteGameInterface.executeAction(RemoteGameInterface.ACTION_ACTIVATE);			}			else{							}		}				public function rgiClientControlClientRegistered(evt:RemoteGameInterfaceEvent):void{			var hash:Object = evt.data;			Cc.log("Remote client registered with hash: '" + hash + "'!");		}				public function rgiClientControlClientUnregistered(evt:RemoteGameInterfaceEvent):void{			Cc.log("Remote client unregistered.");		}				public function rgiClientError(evt:RemoteGameInterfaceEvent):void{			Cc.log("Error: " + evt.data);		}	}	}